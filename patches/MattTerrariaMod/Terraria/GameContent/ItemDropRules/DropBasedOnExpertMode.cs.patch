--- src/Terraria/Terraria/GameContent/ItemDropRules/DropBasedOnExpertMode.cs
+++ src/MattTerrariaMod/Terraria/GameContent/ItemDropRules/DropBasedOnExpertMode.cs
@@ -4,24 +_,24 @@
 
 public class DropBasedOnExpertMode : IItemDropRule, INestedItemDropRule
 {
-	public IItemDropRule ruleForNormalMode;
+	//public IItemDropRule ruleForNormalMode;
 	public IItemDropRule ruleForExpertMode;
 
 	public List<IItemDropRuleChainAttempt> ChainedRules { get; private set; }
 
 	public DropBasedOnExpertMode(IItemDropRule ruleForNormalMode, IItemDropRule ruleForExpertMode)
 	{
-		this.ruleForNormalMode = ruleForNormalMode;
+		//this.ruleForNormalMode = ruleForNormalMode;
 		this.ruleForExpertMode = ruleForExpertMode;
 		ChainedRules = new List<IItemDropRuleChainAttempt>();
 	}
 
 	public bool CanDrop(DropAttemptInfo info)
 	{
-		if (info.IsExpertMode)
+		//if (info.IsExpertMode)
 			return ruleForExpertMode.CanDrop(info);
 
-		return ruleForNormalMode.CanDrop(info);
+		//return ruleForNormalMode.CanDrop(info);
 	}
 
 	public ItemDropAttemptResult TryDroppingItem(DropAttemptInfo info)
@@ -33,20 +_,20 @@
 
 	public ItemDropAttemptResult TryDroppingItem(DropAttemptInfo info, ItemDropRuleResolveAction resolveAction)
 	{
-		if (info.IsExpertMode)
+		//if (info.IsExpertMode)
 			return resolveAction(ruleForExpertMode, info);
 
-		return resolveAction(ruleForNormalMode, info);
+		//return resolveAction(ruleForNormalMode, info);
 	}
 
 	public void ReportDroprates(List<DropRateInfo> drops, DropRateInfoChainFeed ratesInfo)
 	{
 		DropRateInfoChainFeed ratesInfo2 = ratesInfo.With(1f);
-		ratesInfo2.AddCondition(new Conditions.IsExpert());
+		//ratesInfo2.AddCondition(new Conditions.IsExpert());
 		ruleForExpertMode.ReportDroprates(drops, ratesInfo2);
-		DropRateInfoChainFeed ratesInfo3 = ratesInfo.With(1f);
+		//DropRateInfoChainFeed ratesInfo3 = ratesInfo.With(1f);
-		ratesInfo3.AddCondition(new Conditions.NotExpert());
+		//ratesInfo3.AddCondition(new Conditions.NotExpert());
-		ruleForNormalMode.ReportDroprates(drops, ratesInfo3);
+		//ruleForNormalMode.ReportDroprates(drops, ratesInfo3);
 		Chains.ReportDroprates(ChainedRules, 1f, drops, ratesInfo);
 	}
 }
